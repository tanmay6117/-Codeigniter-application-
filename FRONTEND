import React, { useState, useEffect } from 'react';

// Main App component
const App = () => {
  const [authToken, setAuthToken] = useState(null);
  const [view, setView] = useState('login');
  const [userData, setUserData] = useState([]);
  const [teachersData, setTeachersData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  // Simulated API endpoints for demonstration
  const API_BASE_URL = 'http://localhost:8080/api';

  useEffect(() => {
    // In a real app, you would check for a stored token here
    // const storedToken = localStorage.getItem('authToken');
    // if (storedToken) {
    //   setAuthToken(storedToken);
    //   fetchData('users'); // Fetch initial data
    // }
  }, []);

  const handleAuthSuccess = (token, initialView) => {
    setAuthToken(token);
    // In a real app, you would store the token
    // localStorage.setItem('authToken', token);
    setView(initialView);
    // You could fetch data automatically after login
    // fetchData('users');
    // fetchData('teachers');
  };

  const handleLogout = () => {
    setAuthToken(null);
    setUserData([]);
    setTeachersData([]);
    // localStorage.removeItem('authToken');
    setView('login');
  };

  const fetchData = async (dataType) => {
    setLoading(true);
    setError(null);
    try {
      // NOTE: Replace this with your actual API endpoint
      // const response = await fetch(`${API_BASE_URL}/${dataType}`, {
      //   headers: {
      //     'Authorization': `Bearer ${authToken}`,
      //   },
      // });
      // const data = await response.json();
      // if (!response.ok) {
      //   throw new Error(data.message || 'Failed to fetch data');
      // }
      
      // Simulated data for demonstration
      const simulatedData = dataType === 'users' 
        ? [
            { id: 1, email: 'john@example.com', first_name: 'John', last_name: 'Doe' },
            { id: 2, email: 'jane@example.com', first_name: 'Jane', last_name: 'Smith' },
          ]
        : [
            { id: 1, user_id: 1, university_name: 'Tech University', gender: 'Male', year_joined: 2018 },
            { id: 2, user_id: 2, university_name: 'State College', gender: 'Female', year_joined: 2020 },
          ];

      if (dataType === 'users') {
        setUserData(simulatedData);
      } else {
        setTeachersData(simulatedData);
      }
      
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const renderContent = () => {
    if (loading) return <div className="text-center text-gray-600">Loading...</div>;
    if (error) return <div className="text-center text-red-500 font-medium">Error: {error}</div>;

    switch (view) {
      case 'login':
        return <Login onLoginSuccess={handleAuthSuccess} setView={setView} />;
      case 'register':
        return <Register onRegisterSuccess={handleAuthSuccess} setView={setView} />;
      case 'users':
        return <UsersTable data={userData} fetchData={() => fetchData('users')} />;
      case 'teachers':
        return <TeachersTable data={teachersData} fetchData={() => fetchData('teachers')} />;
      default:
        return <Login onLoginSuccess={handleAuthSuccess} setView={setView} />;
    }
  };

  return (
    <div className="min-h-screen bg-gray-100 p-8 font-inter">
      <Header 
        isLoggedIn={!!authToken} 
        onLogout={handleLogout} 
        onNavigate={setView}
      />
      <main className="mt-8">
        {renderContent()}
      </main>
    </div>
  );
};

const Header = ({ isLoggedIn, onLogout, onNavigate }) => (
  <header className="bg-white shadow-md rounded-lg p-4 flex justify-between items-center">
    <h1 className="text-2xl font-bold text-gray-800">Auth & Teachers Dashboard</h1>
    <nav className="space-x-4">
      {isLoggedIn ? (
        <>
          <button 
            onClick={() => onNavigate('users')} 
            className="px-4 py-2 rounded-md text-gray-700 hover:bg-gray-200 transition duration-300"
          >
            Users Data
          </button>
          <button 
            onClick={() => onNavigate('teachers')} 
            className="px-4 py-2 rounded-md text-gray-700 hover:bg-gray-200 transition duration-300"
          >
            Teachers Data
          </button>
          <button 
            onClick={onLogout} 
            className="px-4 py-2 rounded-md bg-red-500 text-white hover:bg-red-600 transition duration-300"
          >
            Logout
          </button>
        </>
      ) : (
        <>
          <button 
            onClick={() => onNavigate('login')} 
            className="px-4 py-2 rounded-md text-gray-700 hover:bg-gray-200 transition duration-300"
          >
            Login
          </button>
          <button 
            onClick={() => onNavigate('register')} 
            className="px-4 py-2 rounded-md bg-blue-500 text-white hover:bg-blue-600 transition duration-300"
          >
            Register
          </button>
        </>
      )}
    </nav>
  </header>
);

const FormWrapper = ({ title, children }) => (
  <div className="max-w-md mx-auto bg-white rounded-lg shadow-xl p-8">
    <h2 className="text-3xl font-bold text-center mb-6 text-gray-800">{title}</h2>
    {children}
  </div>
);

const InputField = ({ label, type, name, value, onChange }) => (
  <div className="mb-4">
    <label className="block text-gray-700 text-sm font-medium mb-2">{label}</label>
    <input
      type={type}
      name={name}
      value={value}
      onChange={onChange}
      className="w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
      required
    />
  </div>
);

const Login = ({ onLoginSuccess, setView }) => {
  const [formData, setFormData] = useState({ email: '', password: '' });
  const [message, setMessage] = useState(null);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setMessage(null);
    try {
      // NOTE: Connect this to your actual CodeIgniter login API
      // const response = await fetch('http://localhost:8080/api/login', {
      //   method: 'POST',
      //   headers: { 'Content-Type': 'application/json' },
      //   body: JSON.stringify(formData),
      // });
      // const result = await response.json();
      // if (!response.ok) {
      //   throw new Error(result.message || 'Login failed.');
      // }
      // onLoginSuccess(result.token, 'users');

      // Simulated success
      const simulatedToken = 'dummy_token_123';
      setMessage('Login successful! Redirecting...');
      onLoginSuccess(simulatedToken, 'users');

    } catch (err) {
      setMessage(err.message);
    }
  };

  return (
    <FormWrapper title="Login">
      <form onSubmit={handleSubmit}>
        <InputField 
          label="Email" 
          type="email" 
          name="email" 
          value={formData.email} 
          onChange={handleChange} 
        />
        <InputField 
          label="Password" 
          type="password" 
          name="password" 
          value={formData.password} 
          onChange={handleChange} 
        />
        <button
          type="submit"
          className="w-full bg-blue-500 text-white py-2 rounded-md hover:bg-blue-600 transition duration-300 font-bold"
        >
          Login
        </button>
        {message && <p className="mt-4 text-center text-sm">{message}</p>}
      </form>
      <p className="mt-4 text-center text-gray-600">
        Don't have an account?{' '}
        <span
          onClick={() => setView('register')}
          className="text-blue-500 cursor-pointer hover:underline"
        >
          Register here
        </span>
      </p>
    </FormWrapper>
  );
};

const Register = ({ onRegisterSuccess, setView }) => {
  const [formData, setFormData] = useState({
    email: '',
    first_name: '',
    last_name: '',
    password: '',
    university_name: '',
    gender: '',
    year_joined: '',
  });
  const [message, setMessage] = useState(null);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setMessage(null);
    try {
      // NOTE: Connect this to your actual CodeIgniter register API
      // This single API call will save data to both tables
      // const response = await fetch('http://localhost:8080/api/register-teacher', {
      //   method: 'POST',
      //   headers: { 'Content-Type': 'application/json' },
      //   body: JSON.stringify(formData),
      // });
      // const result = await response.json();
      // if (!response.ok) {
      //   throw new Error(result.message || 'Registration failed.');
      // }
      // onRegisterSuccess(result.token, 'users');

      // Simulated success
      const simulatedToken = 'dummy_token_123';
      setMessage('Registration successful! Redirecting to login...');
      setTimeout(() => setView('login'), 2000);

    } catch (err) {
      setMessage(err.message);
    }
  };

  return (
    <FormWrapper title="Register">
      <form onSubmit={handleSubmit}>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <InputField label="First Name" type="text" name="first_name" value={formData.first_name} onChange={handleChange} />
          <InputField label="Last Name" type="text" name="last_name" value={formData.last_name} onChange={handleChange} />
        </div>
        <InputField label="Email" type="email" name="email" value={formData.email} onChange={handleChange} />
        <InputField label="Password" type="password" name="password" value={formData.password} onChange={handleChange} />
        <InputField label="University Name" type="text" name="university_name" value={formData.university_name} onChange={handleChange} />
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <InputField label="Gender" type="text" name="gender" value={formData.gender} onChange={handleChange} />
          <InputField label="Year Joined" type="number" name="year_joined" value={formData.year_joined} onChange={handleChange} />
        </div>
        <button
          type="submit"
          className="mt-6 w-full bg-blue-500 text-white py-2 rounded-md hover:bg-blue-600 transition duration-300 font-bold"
        >
          Register
        </button>
        {message && <p className="mt-4 text-center text-sm">{message}</p>}
      </form>
      <p className="mt-4 text-center text-gray-600">
        Already have an account?{' '}
        <span
          onClick={() => setView('login')}
          className="text-blue-500 cursor-pointer hover:underline"
        >
          Login here
        </span>
      </p>
    </FormWrapper>
  );
};

const TableWrapper = ({ title, children }) => (
  <div className="bg-white rounded-lg shadow-xl p-8">
    <div className="flex justify-between items-center mb-6">
      <h2 className="text-3xl font-bold text-gray-800">{title}</h2>
    </div>
    <div className="overflow-x-auto">
      {children}
    </div>
  </div>
);

const UsersTable = ({ data, fetchData }) => {
  useEffect(() => {
    fetchData();
  }, [fetchData]);

  return (
    <TableWrapper title="Users Data">
      <table className="min-w-full divide-y divide-gray-200">
        <thead>
          <tr>
            <th className="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
            <th className="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
            <th className="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">First Name</th>
            <th className="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Last Name</th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {data.length > 0 ? data.map(user => (
            <tr key={user.id}>
              <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{user.id}</td>
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{user.email}</td>
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{user.first_name}</td>
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{user.last_name}</td>
            </tr>
          )) : (
            <tr>
              <td colSpan="4" className="px-6 py-4 text-center text-gray-500">No user data available.</td>
            </tr>
          )}
        </tbody>
      </table>
    </TableWrapper>
  );
};

const TeachersTable = ({ data, fetchData }) => {
  useEffect(() => {
    fetchData();
  }, [fetchData]);

  return (
    <TableWrapper title="Teachers Data">
      <table className="min-w-full divide-y divide-gray-200">
        <thead>
          <tr>
            <th className="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
            <th className="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User ID</th>
            <th className="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">University Name</th>
            <th className="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Gender</th>
            <th className="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Year Joined</th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {data.length > 0 ? data.map(teacher => (
            <tr key={teacher.id}>
              <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{teacher.id}</td>
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{teacher.user_id}</td>
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{teacher.university_name}</td>
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{teacher.gender}</td>
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{teacher.year_joined}</td>
            </tr>
          )) : (
            <tr>
              <td colSpan="5" className="px-6 py-4 text-center text-gray-500">No teachers data available.</td>
            </tr>
          )}
        </tbody>
      </table>
    </TableWrapper>
  );
};

export default App;
